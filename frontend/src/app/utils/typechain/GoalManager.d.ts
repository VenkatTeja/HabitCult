/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GoalManagerInterface extends ethers.utils.Interface {
  functions: {
    "addGoal(address,string,string,string,(string,address),tuple[],uint64,uint64,uint64,uint8,uint256)": FunctionFragment;
    "approve(uint256)": FunctionFragment;
    "currentBlockToLog(uint256)": FunctionFragment;
    "emergencyWithdraw(address,uint256)": FunctionFragment;
    "getGoalByID(uint256)": FunctionFragment;
    "getGoalResult(uint256)": FunctionFragment;
    "getGoalTargetByID(uint256)": FunctionFragment;
    "getGoals(address)": FunctionFragment;
    "getGoalsToValidate(address)": FunctionFragment;
    "getLoggedEvents(uint256,address,uint256)": FunctionFragment;
    "getPeriodEndingsByBlock(uint256)": FunctionFragment;
    "getUserStake(address)": FunctionFragment;
    "giveUpAndCloseGoal(uint256)": FunctionFragment;
    "logActivity(address,uint256,uint64)": FunctionFragment;
    "maxValidators()": FunctionFragment;
    "minPeriodBlocks()": FunctionFragment;
    "nftGoalMap(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "penalty()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repeatGoal(uint256)": FunctionFragment;
    "setMaxValidators(uint64)": FunctionFragment;
    "setMinPeriodBlocks(uint64)": FunctionFragment;
    "setNFTID(uint256,uint256)": FunctionFragment;
    "setParent(address)": FunctionFragment;
    "setPenalty(uint16)": FunctionFragment;
    "setStakingToken(address)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userWithdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addGoal",
    values: [
      string,
      string,
      string,
      string,
      { nick: string; addr: string },
      { nick: string; addr: string }[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentBlockToLog",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGoalByID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGoalResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGoalTargetByID",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getGoals", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getGoalsToValidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoggedEvents",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriodEndingsByBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStake",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "giveUpAndCloseGoal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logActivity",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPeriodBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftGoalMap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "penalty", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repeatGoal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxValidators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPeriodBlocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTID",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setParent", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPenalty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userWithdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addGoal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentBlockToLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGoalByID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGoalResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGoalTargetByID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGoals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGoalsToValidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoggedEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodEndingsByBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "giveUpAndCloseGoal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPeriodBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftGoalMap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "penalty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repeatGoal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPeriodBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNFTID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setParent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPenalty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWithdraw",
    data: BytesLike
  ): Result;

  events: {
    "NewParticipant(uint256,address)": EventFragment;
    "NewValidators(uint256,address[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewParticipant"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewValidators"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type NewParticipantEvent = TypedEvent<
  [BigNumber, string] & { nftID: BigNumber; participant: string }
>;

export type NewValidatorsEvent = TypedEvent<
  [BigNumber, string[]] & { nftID: BigNumber; validators: string[] }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class GoalManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GoalManagerInterface;

  functions: {
    addGoal(
      creator: string,
      name: string,
      objectiveInWords: string,
      category: string,
      participantUser: { nick: string; addr: string },
      validatorUsers: { nick: string; addr: string }[],
      period: BigNumberish,
      eventsPerPeriod: BigNumberish,
      nPeriods: BigNumberish,
      targetType: BigNumberish,
      betAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      betAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentBlockToLog(
      goalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    emergencyWithdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getGoalByID(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        [string, string] & { nick: string; addr: string },
        ([string, string] & { nick: string; addr: string })[],
        BigNumber
      ] & {
        name: string;
        objectiveInWords: string;
        category: string;
        nft: BigNumber;
        participant: [string, string] & { nick: string; addr: string };
        validators: ([string, string] & { nick: string; addr: string })[];
        validatorNFT: BigNumber;
      }
    >;

    getGoalResult(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, BigNumber] & {
          isPass: boolean;
          eventsRegisteredAvg1000x: BigNumber;
        }
      ]
    >;

    getGoalTargetByID(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        number
      ] & {
        startBlock: BigNumber;
        nPeriods: BigNumber;
        period: BigNumber;
        eventsPerPeriod: BigNumber;
        targetType: number;
        betAmount: BigNumber;
        targetStatus: number;
      }
    >;

    getGoals(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getGoalsToValidate(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getLoggedEvents(
      goalID: BigNumberish,
      by: string,
      periodEndBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[boolean, BigNumber] & { voted: boolean; events: BigNumber }]>;

    getPeriodEndingsByBlock(
      goalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUserStake(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          total: BigNumber;
          locked: BigNumber;
          rewards: BigNumber;
        }
      ]
    >;

    giveUpAndCloseGoal(
      goalID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    logActivity(
      sender: string,
      goalID: BigNumberish,
      events: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxValidators(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPeriodBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    nftGoalMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        string,
        [string, string] & { nick: string; addr: string },
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          number
        ] & {
          startBlock: BigNumber;
          nPeriods: BigNumber;
          period: BigNumber;
          eventsPerPeriod: BigNumber;
          targetType: number;
          betAmount: BigNumber;
          targetStatus: number;
        },
        [boolean, BigNumber] & {
          isPass: boolean;
          eventsRegisteredAvg1000x: BigNumber;
        }
      ] & {
        name: string;
        objectiveInWords: string;
        category: string;
        nft: BigNumber;
        creator: string;
        participant: [string, string] & { nick: string; addr: string };
        validatorNFT: BigNumber;
        target: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          number
        ] & {
          startBlock: BigNumber;
          nPeriods: BigNumber;
          period: BigNumber;
          eventsPerPeriod: BigNumber;
          targetType: number;
          betAmount: BigNumber;
          targetStatus: number;
        };
        result: [boolean, BigNumber] & {
          isPass: boolean;
          eventsRegisteredAvg1000x: BigNumber;
        };
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    penalty(overrides?: CallOverrides): Promise<[number]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repeatGoal(
      goalID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxValidators(
      _maxValidators: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinPeriodBlocks(
      _minPeriodBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNFTID(
      goalID: BigNumberish,
      nftID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParent(
      _parent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPenalty(
      _penalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakingToken(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addGoal(
    creator: string,
    name: string,
    objectiveInWords: string,
    category: string,
    participantUser: { nick: string; addr: string },
    validatorUsers: { nick: string; addr: string }[],
    period: BigNumberish,
    eventsPerPeriod: BigNumberish,
    nPeriods: BigNumberish,
    targetType: BigNumberish,
    betAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    betAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentBlockToLog(
    goalID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  emergencyWithdraw(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getGoalByID(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      [string, string] & { nick: string; addr: string },
      ([string, string] & { nick: string; addr: string })[],
      BigNumber
    ] & {
      name: string;
      objectiveInWords: string;
      category: string;
      nft: BigNumber;
      participant: [string, string] & { nick: string; addr: string };
      validators: ([string, string] & { nick: string; addr: string })[];
      validatorNFT: BigNumber;
    }
  >;

  getGoalResult(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & {
      isPass: boolean;
      eventsRegisteredAvg1000x: BigNumber;
    }
  >;

  getGoalTargetByID(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, number, BigNumber, number] & {
      startBlock: BigNumber;
      nPeriods: BigNumber;
      period: BigNumber;
      eventsPerPeriod: BigNumber;
      targetType: number;
      betAmount: BigNumber;
      targetStatus: number;
    }
  >;

  getGoals(_address: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  getGoalsToValidate(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getLoggedEvents(
    goalID: BigNumberish,
    by: string,
    periodEndBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { voted: boolean; events: BigNumber }>;

  getPeriodEndingsByBlock(
    goalID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserStake(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      total: BigNumber;
      locked: BigNumber;
      rewards: BigNumber;
    }
  >;

  giveUpAndCloseGoal(
    goalID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  logActivity(
    sender: string,
    goalID: BigNumberish,
    events: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxValidators(overrides?: CallOverrides): Promise<BigNumber>;

  minPeriodBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  nftGoalMap(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      string,
      [string, string] & { nick: string; addr: string },
      BigNumber,
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        number
      ] & {
        startBlock: BigNumber;
        nPeriods: BigNumber;
        period: BigNumber;
        eventsPerPeriod: BigNumber;
        targetType: number;
        betAmount: BigNumber;
        targetStatus: number;
      },
      [boolean, BigNumber] & {
        isPass: boolean;
        eventsRegisteredAvg1000x: BigNumber;
      }
    ] & {
      name: string;
      objectiveInWords: string;
      category: string;
      nft: BigNumber;
      creator: string;
      participant: [string, string] & { nick: string; addr: string };
      validatorNFT: BigNumber;
      target: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        number
      ] & {
        startBlock: BigNumber;
        nPeriods: BigNumber;
        period: BigNumber;
        eventsPerPeriod: BigNumber;
        targetType: number;
        betAmount: BigNumber;
        targetStatus: number;
      };
      result: [boolean, BigNumber] & {
        isPass: boolean;
        eventsRegisteredAvg1000x: BigNumber;
      };
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  penalty(overrides?: CallOverrides): Promise<number>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repeatGoal(
    goalID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxValidators(
    _maxValidators: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinPeriodBlocks(
    _minPeriodBlocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNFTID(
    goalID: BigNumberish,
    nftID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParent(
    _parent: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPenalty(
    _penalty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakingToken(
    _stakingToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userWithdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addGoal(
      creator: string,
      name: string,
      objectiveInWords: string,
      category: string,
      participantUser: { nick: string; addr: string },
      validatorUsers: { nick: string; addr: string }[],
      period: BigNumberish,
      eventsPerPeriod: BigNumberish,
      nPeriods: BigNumberish,
      targetType: BigNumberish,
      betAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      betAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentBlockToLog(
      goalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGoalByID(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        [string, string] & { nick: string; addr: string },
        ([string, string] & { nick: string; addr: string })[],
        BigNumber
      ] & {
        name: string;
        objectiveInWords: string;
        category: string;
        nft: BigNumber;
        participant: [string, string] & { nick: string; addr: string };
        validators: ([string, string] & { nick: string; addr: string })[];
        validatorNFT: BigNumber;
      }
    >;

    getGoalResult(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        isPass: boolean;
        eventsRegisteredAvg1000x: BigNumber;
      }
    >;

    getGoalTargetByID(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        number
      ] & {
        startBlock: BigNumber;
        nPeriods: BigNumber;
        period: BigNumber;
        eventsPerPeriod: BigNumber;
        targetType: number;
        betAmount: BigNumber;
        targetStatus: number;
      }
    >;

    getGoals(_address: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    getGoalsToValidate(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getLoggedEvents(
      goalID: BigNumberish,
      by: string,
      periodEndBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { voted: boolean; events: BigNumber }>;

    getPeriodEndingsByBlock(
      goalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserStake(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        total: BigNumber;
        locked: BigNumber;
        rewards: BigNumber;
      }
    >;

    giveUpAndCloseGoal(
      goalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    logActivity(
      sender: string,
      goalID: BigNumberish,
      events: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean]>;

    maxValidators(overrides?: CallOverrides): Promise<BigNumber>;

    minPeriodBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    nftGoalMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        string,
        [string, string] & { nick: string; addr: string },
        BigNumber,
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          number
        ] & {
          startBlock: BigNumber;
          nPeriods: BigNumber;
          period: BigNumber;
          eventsPerPeriod: BigNumber;
          targetType: number;
          betAmount: BigNumber;
          targetStatus: number;
        },
        [boolean, BigNumber] & {
          isPass: boolean;
          eventsRegisteredAvg1000x: BigNumber;
        }
      ] & {
        name: string;
        objectiveInWords: string;
        category: string;
        nft: BigNumber;
        creator: string;
        participant: [string, string] & { nick: string; addr: string };
        validatorNFT: BigNumber;
        target: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          BigNumber,
          number
        ] & {
          startBlock: BigNumber;
          nPeriods: BigNumber;
          period: BigNumber;
          eventsPerPeriod: BigNumber;
          targetType: number;
          betAmount: BigNumber;
          targetStatus: number;
        };
        result: [boolean, BigNumber] & {
          isPass: boolean;
          eventsRegisteredAvg1000x: BigNumber;
        };
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    penalty(overrides?: CallOverrides): Promise<number>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repeatGoal(
      goalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMaxValidators(
      _maxValidators: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMinPeriodBlocks(
      _minPeriodBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setNFTID(
      goalID: BigNumberish,
      nftID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setParent(_parent: string, overrides?: CallOverrides): Promise<string>;

    setPenalty(
      _penalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    setStakingToken(
      _stakingToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userWithdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "NewParticipant(uint256,address)"(
      nftID?: null,
      participant?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { nftID: BigNumber; participant: string }
    >;

    NewParticipant(
      nftID?: null,
      participant?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { nftID: BigNumber; participant: string }
    >;

    "NewValidators(uint256,address[])"(
      nftID?: null,
      validators?: null
    ): TypedEventFilter<
      [BigNumber, string[]],
      { nftID: BigNumber; validators: string[] }
    >;

    NewValidators(
      nftID?: null,
      validators?: null
    ): TypedEventFilter<
      [BigNumber, string[]],
      { nftID: BigNumber; validators: string[] }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addGoal(
      creator: string,
      name: string,
      objectiveInWords: string,
      category: string,
      participantUser: { nick: string; addr: string },
      validatorUsers: { nick: string; addr: string }[],
      period: BigNumberish,
      eventsPerPeriod: BigNumberish,
      nPeriods: BigNumberish,
      targetType: BigNumberish,
      betAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      betAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentBlockToLog(
      goalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getGoalByID(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGoalResult(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGoalTargetByID(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGoals(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    getGoalsToValidate(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLoggedEvents(
      goalID: BigNumberish,
      by: string,
      periodEndBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodEndingsByBlock(
      goalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStake(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    giveUpAndCloseGoal(
      goalID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    logActivity(
      sender: string,
      goalID: BigNumberish,
      events: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxValidators(overrides?: CallOverrides): Promise<BigNumber>;

    minPeriodBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    nftGoalMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    penalty(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repeatGoal(
      goalID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxValidators(
      _maxValidators: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinPeriodBlocks(
      _minPeriodBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNFTID(
      goalID: BigNumberish,
      nftID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParent(
      _parent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPenalty(
      _penalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakingToken(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addGoal(
      creator: string,
      name: string,
      objectiveInWords: string,
      category: string,
      participantUser: { nick: string; addr: string },
      validatorUsers: { nick: string; addr: string }[],
      period: BigNumberish,
      eventsPerPeriod: BigNumberish,
      nPeriods: BigNumberish,
      targetType: BigNumberish,
      betAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      betAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentBlockToLog(
      goalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getGoalByID(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGoalResult(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGoalTargetByID(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGoals(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGoalsToValidate(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoggedEvents(
      goalID: BigNumberish,
      by: string,
      periodEndBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodEndingsByBlock(
      goalID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStake(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    giveUpAndCloseGoal(
      goalID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    logActivity(
      sender: string,
      goalID: BigNumberish,
      events: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPeriodBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftGoalMap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    penalty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repeatGoal(
      goalID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxValidators(
      _maxValidators: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinPeriodBlocks(
      _minPeriodBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNFTID(
      goalID: BigNumberish,
      nftID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParent(
      _parent: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPenalty(
      _penalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakingToken(
      _stakingToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userWithdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
