/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "../../../../../backend/typechain/common";

interface CultManagerInterface extends ethers.utils.Interface {
  functions: {
    "addCategory(string,string,string,string,string)": FunctionFragment;
    "addGoal(string,string,string,(string,address),tuple[],uint64,uint64,uint64,uint8,uint256)": FunctionFragment;
    "categories(string)": FunctionFragment;
    "categoryIndexes(uint256)": FunctionFragment;
    "getCategory(string)": FunctionFragment;
    "getCategoryIndexes()": FunctionFragment;
    "getTargetStatuses()": FunctionFragment;
    "getTargetTypes()": FunctionFragment;
    "goalManager()": FunctionFragment;
    "logActivity(uint256,uint64)": FunctionFragment;
    "nCategories()": FunctionFragment;
    "nft()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeCategory(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setNFTAddress(address)": FunctionFragment;
    "setStakerAddress(address)": FunctionFragment;
    "staker()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCategory",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addGoal",
    values: [
      string,
      string,
      string,
      { nick: string; addr: string },
      { nick: string; addr: string }[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "categories", values: [string]): string;
  encodeFunctionData(
    functionFragment: "categoryIndexes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getCategory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getCategoryIndexes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetStatuses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetTypes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "goalManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "logActivity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nCategories",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeCategory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakerAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "staker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addGoal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "categories", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "categoryIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "goalManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logActivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nCategories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNFTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "staker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class CultManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CultManagerInterface;

  functions: {
    addCategory(
      categoryID: string,
      name: string,
      description: string,
      participantUrl: string,
      validatorUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addGoal(
      name: string,
      objectiveInWords: string,
      category: string,
      participantUser: { nick: string; addr: string },
      validatorUsers: { nick: string; addr: string }[],
      period: BigNumberish,
      eventsPerPeriod: BigNumberish,
      nPeriods: BigNumberish,
      targetType: BigNumberish,
      betAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    categories(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, boolean] & {
        name: string;
        description: string;
        participantUrl: string;
        validatorUrl: string;
        exists: boolean;
      }
    >;

    categoryIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCategory(
      index: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string, boolean] & {
          name: string;
          description: string;
          participantUrl: string;
          validatorUrl: string;
          exists: boolean;
        }
      ]
    >;

    getCategoryIndexes(overrides?: CallOverrides): Promise<[string[]]>;

    getTargetStatuses(
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string]>;

    getTargetTypes(overrides?: CallOverrides): Promise<[string, string]>;

    goalManager(overrides?: CallOverrides): Promise<[string]>;

    logActivity(
      goalID: BigNumberish,
      events: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nCategories(overrides?: CallOverrides): Promise<[BigNumber]>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeCategory(
      categoryIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNFTAddress(
      _nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStakerAddress(
      _staker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staker(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addCategory(
    categoryID: string,
    name: string,
    description: string,
    participantUrl: string,
    validatorUrl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addGoal(
    name: string,
    objectiveInWords: string,
    category: string,
    participantUser: { nick: string; addr: string },
    validatorUsers: { nick: string; addr: string }[],
    period: BigNumberish,
    eventsPerPeriod: BigNumberish,
    nPeriods: BigNumberish,
    targetType: BigNumberish,
    betAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  categories(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, boolean] & {
      name: string;
      description: string;
      participantUrl: string;
      validatorUrl: string;
      exists: boolean;
    }
  >;

  categoryIndexes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCategory(
    index: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, boolean] & {
      name: string;
      description: string;
      participantUrl: string;
      validatorUrl: string;
      exists: boolean;
    }
  >;

  getCategoryIndexes(overrides?: CallOverrides): Promise<string[]>;

  getTargetStatuses(
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, string]>;

  getTargetTypes(overrides?: CallOverrides): Promise<[string, string]>;

  goalManager(overrides?: CallOverrides): Promise<string>;

  logActivity(
    goalID: BigNumberish,
    events: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nCategories(overrides?: CallOverrides): Promise<BigNumber>;

  nft(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeCategory(
    categoryIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNFTAddress(
    _nft: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStakerAddress(
    _staker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staker(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCategory(
      categoryID: string,
      name: string,
      description: string,
      participantUrl: string,
      validatorUrl: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addGoal(
      name: string,
      objectiveInWords: string,
      category: string,
      participantUser: { nick: string; addr: string },
      validatorUsers: { nick: string; addr: string }[],
      period: BigNumberish,
      eventsPerPeriod: BigNumberish,
      nPeriods: BigNumberish,
      targetType: BigNumberish,
      betAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    categories(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, boolean] & {
        name: string;
        description: string;
        participantUrl: string;
        validatorUrl: string;
        exists: boolean;
      }
    >;

    categoryIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCategory(
      index: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, boolean] & {
        name: string;
        description: string;
        participantUrl: string;
        validatorUrl: string;
        exists: boolean;
      }
    >;

    getCategoryIndexes(overrides?: CallOverrides): Promise<string[]>;

    getTargetStatuses(
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string]>;

    getTargetTypes(overrides?: CallOverrides): Promise<[string, string]>;

    goalManager(overrides?: CallOverrides): Promise<string>;

    logActivity(
      goalID: BigNumberish,
      events: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { isFinalized: boolean; isPass: boolean }>;

    nCategories(overrides?: CallOverrides): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeCategory(
      categoryIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setNFTAddress(_nft: string, overrides?: CallOverrides): Promise<boolean>;

    setStakerAddress(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    staker(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addCategory(
      categoryID: string,
      name: string,
      description: string,
      participantUrl: string,
      validatorUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addGoal(
      name: string,
      objectiveInWords: string,
      category: string,
      participantUser: { nick: string; addr: string },
      validatorUsers: { nick: string; addr: string }[],
      period: BigNumberish,
      eventsPerPeriod: BigNumberish,
      nPeriods: BigNumberish,
      targetType: BigNumberish,
      betAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    categories(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    categoryIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCategory(index: string, overrides?: CallOverrides): Promise<BigNumber>;

    getCategoryIndexes(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetStatuses(overrides?: CallOverrides): Promise<BigNumber>;

    getTargetTypes(overrides?: CallOverrides): Promise<BigNumber>;

    goalManager(overrides?: CallOverrides): Promise<BigNumber>;

    logActivity(
      goalID: BigNumberish,
      events: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nCategories(overrides?: CallOverrides): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeCategory(
      categoryIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNFTAddress(
      _nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStakerAddress(
      _staker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staker(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCategory(
      categoryID: string,
      name: string,
      description: string,
      participantUrl: string,
      validatorUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addGoal(
      name: string,
      objectiveInWords: string,
      category: string,
      participantUser: { nick: string; addr: string },
      validatorUsers: { nick: string; addr: string }[],
      period: BigNumberish,
      eventsPerPeriod: BigNumberish,
      nPeriods: BigNumberish,
      targetType: BigNumberish,
      betAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    categories(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    categoryIndexes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCategory(
      index: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCategoryIndexes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTargetStatuses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTargetTypes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    goalManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    logActivity(
      goalID: BigNumberish,
      events: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nCategories(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCategory(
      categoryIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNFTAddress(
      _nft: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStakerAddress(
      _staker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
